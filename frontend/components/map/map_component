import React from 'react';
import MapMarker from './map_marker';

class SearchMap extends React.Component {
    constructor(props) {
        super(props);

        this.comparison = this.comparison.bind(this);
    }


    componentDidMount() {
        let lat;
        let long;

        const { listings } = this.props;
        if (listings.length === 0) {
            lat = 40.7580;
            long = -73.9855;
        } else {
            lat = listings[0].lat;
            long = listings[0].long;
        }
        const mapOptions = {
            center: { lat: lat, long: long },
            zoom: 12
        }

        this.map = new google.maps.Map(this.mapNode, mapOptions);
        this.MapMarker = new MapMarker(this.map)


        listings.map(listing => {
            let marker = new google.maps.Marker({
                map: this.map,
                draggable: false,
                position: { lat: listing.lat, long: listing.long },
                animation: google.maps.Animation.DROP
            });
            marker.setMap(this.map);
        })

    }

    componentDidUpdate(prevProps) {

        let lat;
        let long;

        const { listings } = this.props;
        if (listings.length === 0) {
            lat = 40.7580;
            long = -73.9855;
        } else {
            lat = listings[0].lat;
            long = listings[0].long;
        }
        const mapOptions = {
            center: { lat: lat, long: long },
            zoom: 12
        }
        this.map = new google.maps.Map(this.mapNode, mapOptions);

        
        if (this.comparison(listings, prevProps.listings)) {

            listings.map(listing => {
                let marker = new google.maps.Marker({
                    map: this.map,
                    draggable: false,
                    position: { lat: listing.lat, long: listing.long },
                    animation: google.maps.Animation.DROP
                });

                return marker.setMap(this.map);
                }
            )
        }
    }

    comparison(arr1, arr2) {
        if (arr1.length !== arr2.length) {

            return true
        } else {
            arr1.map(el1 => {

                arr2.map(el2 => {
                    if (el1 !== el2) {
   
                        return true
                    }
                })
            })
            return false;
        }
    }

    render() {
        debugger
        return (
            <div className="search-map-container">
                <div className="search-map" ref={map => this.mapNode = map} >

                </div>
            </div>

        )
    }
};

export default SearchMap;